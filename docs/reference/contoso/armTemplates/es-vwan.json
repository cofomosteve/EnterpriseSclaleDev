{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleCompanyPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "esNamingConvention": {
            "type": "string",

            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "listOfAllowedLocations": {
            "type": "Array",
            "defaultValue": [
                "canadacentral",
                "canadaeast"
            ],
            "metadata": {
                "description": "The list of contact RBAC roles, in an array, to send the budget notification to when the threshold is exceeded."
            }
        },
        "resourceTagsOQLF": {
            "type": "object",
            "defaultValue": {
                "CentreCout": "DTI",
                "Env": "Prod",
                "RAD": "Mission Critique",
                "CIDC": "111",
                "NomApplication": "ES",
                "Direction": "DTI"
            }
        },
        "resourceTagCAF": {
            "type": "object",
            "defaultValue": {
                "CostCenter": "ITxxx",
                "Env": "Prod",
                "DR": "Mission Critique",
                "Direction": "SHARED"
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableCustomRBAC": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },

        "retentionInDays": {
            "type": "string",
            "defaultValue": ""
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAksPolicy": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForStorage": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSql": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKeyVault": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForArm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForDns": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKubernetes": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForRegistries": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableArcMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce Arc monitoring."
            }
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAgentHealth": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableActivityLog": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableAntiMalware": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableServiceMap": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAssessment": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyRdp": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]"
        },
        "enableVwan": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-pbmm": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-kubclust-sec-base-linux-wk": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-kubclust-sec-strict-linux-wk": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "apply-windows-vm-security-base": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-data-protection-suite": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-flowlog-nsg-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-config-azuremonitor-security-agent-vm-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-vm-insecure-pwd-security-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-deny-public-endpoint-paas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-tls-ssl-enforcement-encrypt-paas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "apply-audit-resource-without-encryption": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "tagsByResource": {
            "type": "object",
            "defaultValue": {}
        },

        "cktagbyresource": {
            "type": "bool",
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": false
        },
        "tagauditpolicy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },


        "listOfResourceTypesWithDiagnosticLogsEnabled": {
            "type": "Array",

            "defaultValue": [

            ]
        },
        "listOfMembersToExcludeFromWindowsVMAdministratorsGroup": {
            "type": "String",
            "defaultValue": "AdminNo"

        },
        "listOfMembersToIncludeInWindowsVMAdministratorsGroup": {
            "type": "String",
            "defaultValue": "AdminYes"

        }
    },
    "variables": {

        "resourceTagsOQLF": "[parameters('resourceTagsOQLF')]",
        "tagsByResource": "[parameters('tagsByResource')]",
        "resourceTagCAF": "[parameters('resourceTagCAF')]",
        "resourceTags": "[if(equals(parameters('esNamingConvention'), 'OQLF'),variables('tagsByResource'),variables('resourceTagCAF'))]",

        "globalvariable": {
            "prefixmgn": "mg-",
            "businessunit": "IT-",
            "env": "prod-",
            "appname": "ES-",
            "topLevelManagementGroupPrefix": "[concat(variables('globalvariable').prefixmgn,parameters('enterpriseScaleCompanyPrefix'))]",
            "scope": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix)]",
            "scopeplatform": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-platform')]",
            "scopemanagement": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-management')]",
            "scopeconnectivity": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-connectivity')]",
            "scopeidentity": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-identity')]",
            "scopelz": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-landingzones')]",
            "scopelzonline": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-online')]",
            "scopelzcorp": "[concat('/providers/Microsoft.Management/managementGroups/', variables('globalvariable').topLevelManagementGroupPrefix, '-corp')]",

            "genericresourceprefix": {
                "mgngroup": "[variables('globalvariable').prefixmgn]",
                "mgngroupmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.mgngroup,   parameters('enterpriseScaleCompanyPrefix')),'CAF')]",
                "resourcgroup": "rg-",

                "resourcgroupmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.resourcgroup,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "policydefp": "pdef-",
                "policydefpmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.policydefp,   parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "policyassign": "passign-",
                "policyassignmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.policyassign,   parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "rbacassign": "RBAC-CUSTOM-",
                "rbacassignmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.rbacassign,   parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "rbacdef": "rbac-ass-",
                "rbacdefmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.rbacdef,   parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "loganalyticwk": "la-",
                "loganalyticwkmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.loganalyticwk,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "keyvault": "kv-",
                "keyvaultmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.keyvault,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "storage": "st-",
                "storagemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.storage,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "storagediagnostic": "st-",
                "storagediagnosticmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.storagediagnostic,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "conatainerinstance": "aci-",
                "conatainerinstancemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.conatainerinstance,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "containerregistry": "acr-",
                "containerregistrymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.containerregistry,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "budgetconsumption": "bdcon-",
                "budgetconsumptionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.budgetconsumption,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "diasgsetting": "kv-",
                "diasgsettingmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.diasgsetting,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "deployment": "dp-",
                "deploymentmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.deployment,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",


                "virtualnetwork": "vnet-",
                "virtualnetworkmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualnetwork,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "subnet": "snet-",
                "subnetmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.subnet,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "virtualnetworkpeering": "vnet-peer",
                "virtualnetworkpeeringmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualnetworkpeering,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virtualnetworkgateway": "vnet-gw-v-",
                "virtualnetworkgatewaymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualnetworkgateway,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "localnetworkgateway": "vnet-gw-l-",
                "localnetworkgatewaylocalmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.localnetworkgateway,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "networksitetosite": "cm-",
                "networksitetositemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.networksitetosite,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "vpnconnection": "cn-",
                "vpnconnectionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.vpnconnection,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "nsg": "nsg-",
                "nsgmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.nsg,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "asg": "asg-",
                "asgmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.asg,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",
                "pubip": "pip-",
                "pubipmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.pubip,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env,'-',deployment().location),'CAF')]",

                "virtualmachine": "vm-",
                "virtualmachinemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachine,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virtualmachinestorageaccount": "stvm-",
                "virtualmachinestorageaccountmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachinestorageaccount,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "nic": "nic-",
                "nicmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachinestorageaccount,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "dnsprivate": "dns-",
                "dnsprivatemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.dnsprivate,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "dnspubblic": "dns-",
                "dnspubblicmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.dnspubblic,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "loadbalancer": "stvm-",
                "loadbalancermgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.loadbalancer,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "applicationgateway": "app-gt-",
                "applicationgatewaymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachinestorageaccount,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "privatelink": "priv-lk-",
                "privatelinkmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.privatelink,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "privateendpoint": "priv-end-p-",
                "privateendpointmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.privateendpoint,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azurefirewall": "fw-",
                "azurefirewallmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azurefirewall,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azurefirewallpolicies": "fw-pol-",
                "azurefirewallpoliciesmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azurefirewallpolicies,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azurefirewallrulegroup": "fw-rul-",
                "azurefirewallrulegroupmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azurefirewallrulegroup,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "securityprincing": "sec-pric-",
                "securityprincingmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.securityprincing,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "workspacedatasource": "wk-dt-",
                "workspacedatasourcemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.workspacedatasource,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "automationaccount": "aut-acc-",
                "automationaccountmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.automationaccount,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "workspace": "wk-",
                "workspacemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.workspace,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "linkedservice": "lk-svc-",
                "linkedservicemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.linkedservice,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "ddosplan": "ddos-pl-",
                "ddosplanmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.ddosplan,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "networkwatcher": "nt-watch-",
                "networkwatchermgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.networkwatcher,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "networkwatcherflowlog": "nt-watch-fl-",
                "networkwatcherflowlogmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.networkwatcherflowlog,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "databaseauditsetting": "db-aud-set-",
                "databaseauditsettingmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.databaseauditsetting,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "databasetransparencrypt": "db-trans-enc-",
                "databasetransparencryptmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.databasetransparencrypt,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "dataasesecalertpol": "db-sec-al-pol-",
                "dataasesecalertpolmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.dataasesecalertpol,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "databasevulassess": "db-vulass-",
                "databasevulassessmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.databasevulassess,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virrtualhub": "vhub-",
                "virrtualhubmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virrtualhub,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virrtualhubconnection": "vhub-con-",
                "virrtualhubconnectionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virrtualhubconnection,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virtualwan": "vwan-",
                "virtualwanmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualwan,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "vpngateway": "vpn-gt-",
                "vpngatewaymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.vpngateway,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "expressroutegateway": "ex-gt-",
                "expressroutegatewaymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.expressroutegateway,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "virtualmachineextension": "vm-ext-",
                "virtualmachineextensionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachineextension,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "dbformysql": "mysqldb-",
                "dbformysqlmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.dbformysql,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "dbforpostgres": "pgdb-",
                "dbforpostgresmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.dbforpostgres,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "sqlmanagedinst": "sql-mgn-i-",
                "sqlmanagedinstmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.sqlmanagedinst,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "sqlserver": "sqlsvr-",
                "sqlservermgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.sqlserver,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",


                "opmanagesolution": "op-mgn-sol-",
                "opmanagesolutionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.opmanagesolution,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "sqldb": "sqldb-",
                "sqldbmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.sqldb,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "appservice": "azapp-",
                "appservicemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.appservice,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "apimanage": "azpia-",
                "apimanagemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.apimanage,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "appconfig": "appcf-",
                "appconfigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.appconfig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "appserviceplan": "azapp-pl-",
                "appserviceplanmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.appserviceplan,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azurefonction": "azfun-",
                "azurefonctionmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azurefonction,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "cloudservice": "azcs-",
                "cloudservicemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.cloudservice,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "cosmosdb": "cosdb-",
                "cosmosdbmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.cosmosdb,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "redisdb": "redis-",
                "redisdbmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.redisdb,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "sqldatawarehouse": "sqldw-",
                "sqldatawarehousemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.sqldatawarehouse,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azuresearch": "srch-",
                "azuresearchmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azuresearch,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "cognitiveservice": "cs-",
                "cognitiveservicemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.cognitiveservice,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "machinelearnignwokspace": "aml-",
                "machinelearnignwokspacemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.machinelearnignwokspace,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "datalakestorage": "dls-",
                "datalakestoragemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.datalakestorage,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "datalakeanalytic": "dla-",
                "datalakeanalyticmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.datalakeanalytic,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "datafactory": "df-",
                "datafactorymgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.datafactory,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "eventhub": "evh-",
                "eventhubmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.eventhub,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "notificationhub": "anh-",
                "notificationhubmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.notificationhub,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "notificationhubnamespace": "anhns-",
                "notificationhubnamespacemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.notificationhubnamespace,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "blueprint": "bp-",
                "blueprintmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.blueprint,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",

                "azmonitorappinsig": "app-ins-",
                "azmonitorappinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorappinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorvminsig": "vm-ins-",
                "azmonitorvminsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorvminsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitornetworkinsig": "nwt-ins-",
                "azmonitornetworkinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitornetworkinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorsqlinsig": "sql-ins-",
                "azmonitorsqlinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorsqlinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorcontainerinsig": "ctn-ins-",
                "azmonitorcontainerinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorcontainerinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorcosmosdbinsig": "cosdb-ins-",
                "azmonitorcosmosdbinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorcosmosdbinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorressourcegpinsig": "rg-ins-",
                "azmonitorressourcegpinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorressourcegpinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorstorageinsig": "stor-ins-",
                "azmonitorstorageinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorstorageinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorkeyvaultinsig": "kv-ins-",
                "azmonitorkeyvaultinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorkeyvaultinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azmonitorredisinsig": "redis-ins-",
                "azmonitorredisinsigmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azmonitorredisinsig,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "virtualmachinescaleset": "vm-set-",
                "virtualmachinescalesetmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.virtualmachinescaleset,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "trafficmanage": "tf-",
                "trafficmanagemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.trafficmanage,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "cdn": "cdn-",
                "cdnmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.cdn,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "migrate": "azmigr-",
                "migratemgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.migrate,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "managedapp": "mgnapp-",
                "managedappmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.managedapp,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "kubernettescluster": "aks-",
                "kubernettesclustermgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.kubernettescluster,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "azureacr": "azacr-",
                "azureacrmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.azureacr,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "fontdoor": "fd-",
                "fontdoormgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.fontdoor,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "backup": "bk-",
                "backupmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.backup,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]",
                "bastionhost": "bh-",
                "bastionhostmgn": "[if(equals(parameters('esNamingConvention'), 'OQLF'),concat(variables('globalvariable').genericresourceprefix.bastionhost,  parameters('enterpriseScaleCompanyPrefix'),'-',variables('globalvariable').businessunit,variables('globalvariable').env),'CAF')]"






            }


        },


        "azPolicyEnvMapping": {
            "https://management.azure.com/": "auxiliary/policies.json",
            "https://management.chinacloudapi.cn": "auxiliary/mkPolicies.json",
            "https://management.azgov.com": "auxiliary/"
        },

        "azEnvPolicy": "[variables('azPolicyEnvMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'auxiliary/mgmtGroups.json')]",
            "policyDefinitions": "[concat(uri(deployment().properties.templateLink.uri, variables('azEnvPolicy')))]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalytics.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalyticsSolutions.json')]",
            "connectivity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/vwan-connectivity.json')]",
            "diagnosticsAndSecurity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/diagnosticsAndSecurity.json')]",
            "landingZone": "[uri(deployment().properties.templateLink.uri, 'auxiliary/lz.json')]",
            "identity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/identity.json')]",
            "customrbac": "[uri(deployment().properties.templateLink.uri, 'auxiliary/custom-rbac.json')]",
            "custompoliciesassign": "[uri(deployment().properties.templateLink.uri, 'auxiliary/policiesassignment.json')]"
        },
        "moveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', parameters('managementSubscriptionId'))]",
        "noSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', 'na')]",
        "noOnlineLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-online', '/', 'nalz')]",
        "noCorpLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-corp', '/', 'nalz')]",
        "connectivityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', parameters('connectivitySubscriptionId'))]",
        "noConnectivitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', 'naconn')]",
        "identityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', parameters('identitySubscriptionId'))]",
        "noIdentitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', 'naid')]",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat('EntScale-Mgs', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "policyDeploymentName": "[take(concat('EntScale-Policy', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringDeploymentName": "[take(concat('EntScale-Monitoring', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat('EntScale-Solutions', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "diagAndSecDeploymentName": "[take(concat('EntScale-DiagSec', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "connectivityDeploymentName": "[take(concat('EntScale-conn', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "lzDeploymentName": "[take(concat('EntScale-LZ', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "identityDeploymentName": "[take(concat('EntScale-ID', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "customrbacDeploymentName": "[take(concat('EntScale-RBAC', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "customPoliciesAssigDeploymentName": "[take(concat('EntScale-PoliciesAssig', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('globalvariable').topLevelManagementGroupPrefix]" //"[parameters('enterpriseScaleCompanyPrefix')]"

                    },
                    "prefixmgn": {
                        "value": "[variables('globalvariable').prefixmgn]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('globalvariable').scope]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },

                    "resourceTags": { "value": "[variables('resourceTags')]" },

                    "prefixmgn": { "value": "[variables('globalvariable').prefixmgn]" },
                    "appname": { "value": "[variables('globalvariable').appname]" },
                    "businessunit": { "value": "[variables('globalvariable').businessunit]" },
                    "scope": { "value": "[variables('globalvariable').scope]" },
                    "scopeplatform": { "value": "[variables('globalvariable').scopeplatform]" },
                    "scopemanagement": { "value": "[variables('globalvariable').scopemanagement]" },
                    "scopeconnectivity": { "value": "[variables('globalvariable').scopeconnectivity]" },
                    "scopeidentity": { "value": "[variables('globalvariable').scopeidentity]" },
                    "scopelz": { "value": "[variables('globalvariable').scopelz]" },
                    "scopelzonline": { "value": "[variables('globalvariable').scopelzonline]" },
                    "scopelzcorp": { "value": "[variables('globalvariable').scopelzcorp]" },
                    "mgngroup": { "value": "[variables('globalvariable').genericresourceprefix.mgngroup]" },
                    "mgngroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.mgngroupmgn]" },
                    "resourcgroup": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroup]" },
                    "resourcgroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroupmgn]" },
                    "policydefp": { "value": "[variables('globalvariable').genericresourceprefix.policydefp]" },
                    "policydefpmgn": { "value": "[variables('globalvariable').genericresourceprefix.policydefpmgn]" },
                    "policyassign": { "value": "[variables('globalvariable').genericresourceprefix.policyassign]" },
                    "policyassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.policyassignmgn]" },
                    "rbacassign": { "value": "[variables('globalvariable').genericresourceprefix.rbacassign]" },
                    "rbacassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacassignmgn]" },
                    "rbacdef": { "value": "[variables('globalvariable').genericresourceprefix.rbacdef]" },
                    "rbacdefmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacdefmgn]" },
                    "loganalyticwk": { "value": "[variables('globalvariable').genericresourceprefix.loganalyticwk]" },
                    "loganalyticwkmgn": { "value": "[variables('globalvariable').genericresourceprefix.loganalyticwkmgn]" },
                    "keyvault": { "value": "[variables('globalvariable').genericresourceprefix.keyvault]" },
                    "keyvaultmgn": { "value": "[variables('globalvariable').genericresourceprefix.keyvaultmgn]" },
                    "storage": { "value": "[variables('globalvariable').genericresourceprefix.storage]" },
                    "storagemgn": { "value": "[variables('globalvariable').genericresourceprefix.storagemgn]" },
                    "storagediagnostic": { "value": "[variables('globalvariable').genericresourceprefix.storagediagnostic]" },
                    "storagediagnosticmgn": { "value": "[variables('globalvariable').genericresourceprefix.storagediagnosticmgn]" },
                    "conatainerinstance": { "value": "[variables('globalvariable').genericresourceprefix.conatainerinstance]" },
                    "conatainerinstancemgn": { "value": "[variables('globalvariable').genericresourceprefix.conatainerinstancemgn]" },
                    "containerregistry": { "value": "[variables('globalvariable').genericresourceprefix.containerregistry]" },
                    "containerregistrymgn": { "value": "[variables('globalvariable').genericresourceprefix.containerregistrymgn]" },
                    "budgetconsumption": { "value": "[variables('globalvariable').genericresourceprefix.budgetconsumption]" },
                    "budgetconsumptionmgn": { "value": "[variables('globalvariable').genericresourceprefix.budgetconsumptionmgn]" },
                    "diasgsetting": { "value": "[variables('globalvariable').genericresourceprefix.diasgsetting]" },
                    "diasgsettingmgn": { "value": "[variables('globalvariable').genericresourceprefix.diasgsettingmgn]" },
                    "deployment": { "value": "[variables('globalvariable').genericresourceprefix.deployment]" },
                    "deploymentmgn": { "value": "[variables('globalvariable').genericresourceprefix.deploymentmgn]" },
                    "virtualnetwork": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetwork]" },
                    "virtualnetworkmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetworkmgn]" },
                    "subnet": { "value": "[variables('globalvariable').genericresourceprefix.subnet]" },
                    "subnetmgn": { "value": "[variables('globalvariable').genericresourceprefix.subnetmgn]" },
                    "virtualnetworkpeering": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetworkpeering]" },
                    "virtualnetworkpeeringmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetworkpeeringmgn]" },
                    "virtualnetworkgateway": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetworkgateway]" },
                    "virtualnetworkgatewaymgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualnetworkgatewaymgn]" },
                    "localnetworkgateway": { "value": "[variables('globalvariable').genericresourceprefix.localnetworkgateway]" },
                    "localnetworkgatewaylocalmgn": { "value": "[variables('globalvariable').genericresourceprefix.localnetworkgatewaylocalmgn]" },
                    "networksitetosite": { "value": "[variables('globalvariable').genericresourceprefix.networksitetosite]" },
                    "networksitetositemgn": { "value": "[variables('globalvariable').genericresourceprefix.networksitetositemgn]" },
                    "vpnconnection": { "value": "[variables('globalvariable').genericresourceprefix.vpnconnection]" },
                    "vpnconnectionmgn": { "value": "[variables('globalvariable').genericresourceprefix.vpnconnectionmgn]" },
                    "nsg": { "value": "[variables('globalvariable').genericresourceprefix.nsg]" },
                    "nsgmgn": { "value": "[variables('globalvariable').genericresourceprefix.nsgmgn]" },
                    "asg": { "value": "[variables('globalvariable').genericresourceprefix.asg]" },
                    "asgmgn": { "value": "[variables('globalvariable').genericresourceprefix.asgmgn]" },
                    "pubip": { "value": "[variables('globalvariable').genericresourceprefix.pubip]" },
                    "pubipmgn": { "value": "[variables('globalvariable').genericresourceprefix.pubipmgn]" },
                    "virtualmachine": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachine]" },
                    "virtualmachinemgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachinemgn]" },
                    "virtualmachinestorageaccount": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachinestorageaccount]" },
                    "virtualmachinestorageaccountmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachinestorageaccountmgn]" },
                    "nic": { "value": "[variables('globalvariable').genericresourceprefix.nic]" },
                    "nicmgn": { "value": "[variables('globalvariable').genericresourceprefix.nicmgn]" },
                    "dnsprivate": { "value": "[variables('globalvariable').genericresourceprefix.dnsprivate]" },
                    "dnsprivatemgn": { "value": "[variables('globalvariable').genericresourceprefix.dnsprivatemgn]" },
                    "dnspubblic": { "value": "[variables('globalvariable').genericresourceprefix.dnspubblic]" },
                    "dnspubblicmgn": { "value": "[variables('globalvariable').genericresourceprefix.dnspubblicmgn]" },
                    "loadbalancer": { "value": "[variables('globalvariable').genericresourceprefix.loadbalancer]" },
                    "loadbalancermgn": { "value": "[variables('globalvariable').genericresourceprefix.loadbalancermgn]" },
                    "applicationgateway": { "value": "[variables('globalvariable').genericresourceprefix.applicationgateway]" },
                    "applicationgatewaymgn": { "value": "[variables('globalvariable').genericresourceprefix.applicationgatewaymgn]" },
                    "privatelink": { "value": "[variables('globalvariable').genericresourceprefix.privatelink]" },
                    "privatelinkmgn": { "value": "[variables('globalvariable').genericresourceprefix.privatelinkmgn]" },
                    "privateendpoint": { "value": "[variables('globalvariable').genericresourceprefix.privateendpoint]" },
                    "privateendpointmgn": { "value": "[variables('globalvariable').genericresourceprefix.privateendpointmgn]" },
                    "azurefirewall": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewall]" },
                    "azurefirewallmgn": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewallmgn]" },
                    "azurefirewallpolicies": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewallpolicies]" },
                    "azurefirewallpoliciesmgn": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewallpoliciesmgn]" },
                    "azurefirewallrulegroup": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewallrulegroup]" },
                    "azurefirewallrulegroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.azurefirewallrulegroupmgn]" },
                    "securityprincing": { "value": "[variables('globalvariable').genericresourceprefix.securityprincing]" },
                    "securityprincingmgn": { "value": "[variables('globalvariable').genericresourceprefix.securityprincingmgn]" },
                    "workspacedatasource": { "value": "[variables('globalvariable').genericresourceprefix.workspacedatasource]" },
                    "workspacedatasourcemgn": { "value": "[variables('globalvariable').genericresourceprefix.workspacedatasourcemgn]" },
                    "automationaccount": { "value": "[variables('globalvariable').genericresourceprefix.automationaccount]" },
                    "automationaccountmgn": { "value": "[variables('globalvariable').genericresourceprefix.automationaccountmgn]" },
                    "workspace": { "value": "[variables('globalvariable').genericresourceprefix.workspace]" },
                    "workspacemgn": { "value": "[variables('globalvariable').genericresourceprefix.workspacemgn]" },
                    "linkedservice": { "value": "[variables('globalvariable').genericresourceprefix.linkedservice]" },
                    "linkedservicemgn": { "value": "[variables('globalvariable').genericresourceprefix.linkedservicemgn]" },
                    "ddosplan": { "value": "[variables('globalvariable').genericresourceprefix.ddosplan]" },
                    "ddosplanmgn": { "value": "[variables('globalvariable').genericresourceprefix.ddosplanmgn]" },
                    "networkwatcher": { "value": "[variables('globalvariable').genericresourceprefix.networkwatcher]" },
                    "networkwatchermgn": { "value": "[variables('globalvariable').genericresourceprefix.networkwatchermgn]" },
                    "networkwatcherflowlog": { "value": "[variables('globalvariable').genericresourceprefix.networkwatcherflowlog]" },
                    "networkwatcherflowlogmgn": { "value": "[variables('globalvariable').genericresourceprefix.networkwatcherflowlogmgn]" },
                    "databaseauditsetting": { "value": "[variables('globalvariable').genericresourceprefix.databaseauditsetting]" },
                    "databaseauditsettingmgn": { "value": "[variables('globalvariable').genericresourceprefix.databaseauditsettingmgn]" },
                    "databasetransparencrypt": { "value": "[variables('globalvariable').genericresourceprefix.databasetransparencrypt]" },
                    "databasetransparencryptmgn": { "value": "[variables('globalvariable').genericresourceprefix.databasetransparencryptmgn]" },
                    "dataasesecalertpol": { "value": "[variables('globalvariable').genericresourceprefix.dataasesecalertpol]" },
                    "dataasesecalertpolmgn": { "value": "[variables('globalvariable').genericresourceprefix.dataasesecalertpolmgn]" },
                    "databasevulassess": { "value": "[variables('globalvariable').genericresourceprefix.databasevulassess]" },
                    "databasevulassessmgn": { "value": "[variables('globalvariable').genericresourceprefix.databasevulassessmgn]" },
                    "virrtualhub": { "value": "[variables('globalvariable').genericresourceprefix.virrtualhub]" },
                    "virrtualhubmgn": { "value": "[variables('globalvariable').genericresourceprefix.virrtualhubmgn]" },
                    "virrtualhubconnection": { "value": "[variables('globalvariable').genericresourceprefix.virrtualhubconnection]" },
                    "virrtualhubconnectionmgn": { "value": "[variables('globalvariable').genericresourceprefix.virrtualhubconnectionmgn]" },
                    "virtualwan": { "value": "[variables('globalvariable').genericresourceprefix.virtualwan]" },
                    "virtualwanmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualwanmgn]" },
                    "vpngateway": { "value": "[variables('globalvariable').genericresourceprefix.vpngateway]" },
                    "vpngatewaymgn": { "value": "[variables('globalvariable').genericresourceprefix.vpngatewaymgn]" },
                    "expressroutegateway": { "value": "[variables('globalvariable').genericresourceprefix.expressroutegateway]" },
                    "expressroutegatewaymgn": { "value": "[variables('globalvariable').genericresourceprefix.expressroutegatewaymgn]" },
                    "virtualmachineextension": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachineextension]" },
                    "virtualmachineextensionmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachineextensionmgn]" },
                    "dbformysql": { "value": "[variables('globalvariable').genericresourceprefix.dbformysql]" },
                    "dbformysqlmgn": { "value": "[variables('globalvariable').genericresourceprefix.dbformysqlmgn]" },
                    "dbforpostgres": { "value": "[variables('globalvariable').genericresourceprefix.dbforpostgres]" },
                    "dbforpostgresmgn": { "value": "[variables('globalvariable').genericresourceprefix.dbforpostgresmgn]" },
                    "sqlmanagedinst": { "value": "[variables('globalvariable').genericresourceprefix.sqlmanagedinst]" },
                    "sqlmanagedinstmgn": { "value": "[variables('globalvariable').genericresourceprefix.sqlmanagedinstmgn]" },
                    "sqlserver": { "value": "[variables('globalvariable').genericresourceprefix.sqlserver]" },
                    "sqlservermgn": { "value": "[variables('globalvariable').genericresourceprefix.sqlservermgn]" },
                    "opmanagesolution": { "value": "[variables('globalvariable').genericresourceprefix.opmanagesolution]" },
                    "opmanagesolutionmgn": { "value": "[variables('globalvariable').genericresourceprefix.opmanagesolutionmgn]" },
                    "sqldb": { "value": "[variables('globalvariable').genericresourceprefix.sqldb]" },
                    "sqldbmgn": { "value": "[variables('globalvariable').genericresourceprefix.sqldbmgn]" },
                    "appservice": { "value": "[variables('globalvariable').genericresourceprefix.appservice]" },
                    "appservicemgn": { "value": "[variables('globalvariable').genericresourceprefix.appservicemgn]" },
                    "apimanage": { "value": "[variables('globalvariable').genericresourceprefix.apimanage]" },
                    "apimanagemgn": { "value": "[variables('globalvariable').genericresourceprefix.apimanagemgn]" },
                    "appconfig": { "value": "[variables('globalvariable').genericresourceprefix.appconfig]" },
                    "appconfigmgn": { "value": "[variables('globalvariable').genericresourceprefix.appconfigmgn]" },
                    "appserviceplan": { "value": "[variables('globalvariable').genericresourceprefix.appserviceplan]" },
                    "appserviceplanmgn": { "value": "[variables('globalvariable').genericresourceprefix.appserviceplanmgn]" },
                    "azurefonction": { "value": "[variables('globalvariable').genericresourceprefix.azurefonction]" },
                    "azurefonctionmgn": { "value": "[variables('globalvariable').genericresourceprefix.azurefonctionmgn]" },
                    "cloudservice": { "value": "[variables('globalvariable').genericresourceprefix.cloudservice]" },
                    "cloudservicemgn": { "value": "[variables('globalvariable').genericresourceprefix.cloudservicemgn]" },
                    "cosmosdb": { "value": "[variables('globalvariable').genericresourceprefix.cosmosdb]" },
                    "cosmosdbmgn": { "value": "[variables('globalvariable').genericresourceprefix.cosmosdbmgn]" },
                    "redisdb": { "value": "[variables('globalvariable').genericresourceprefix.redisdb]" },
                    "redisdbmgn": { "value": "[variables('globalvariable').genericresourceprefix.redisdbmgn]" },
                    "sqldatawarehouse": { "value": "[variables('globalvariable').genericresourceprefix.sqldatawarehouse]" },
                    "sqldatawarehousemgn": { "value": "[variables('globalvariable').genericresourceprefix.sqldatawarehousemgn]" },
                    "azuresearch": { "value": "[variables('globalvariable').genericresourceprefix.azuresearch]" },
                    "azuresearchmgn": { "value": "[variables('globalvariable').genericresourceprefix.azuresearchmgn]" },
                    "cognitiveservice": { "value": "[variables('globalvariable').genericresourceprefix.cognitiveservice]" },
                    "cognitiveservicemgn": { "value": "[variables('globalvariable').genericresourceprefix.cognitiveservicemgn]" },
                    "machinelearnignwokspace": { "value": "[variables('globalvariable').genericresourceprefix.machinelearnignwokspace]" },
                    "machinelearnignwokspacemgn": { "value": "[variables('globalvariable').genericresourceprefix.machinelearnignwokspacemgn]" },
                    "datalakestorage": { "value": "[variables('globalvariable').genericresourceprefix.datalakestorage]" },
                    "datalakestoragemgn": { "value": "[variables('globalvariable').genericresourceprefix.datalakestoragemgn]" },
                    "datalakeanalytic": { "value": "[variables('globalvariable').genericresourceprefix.datalakeanalytic]" },
                    "datalakeanalyticmgn": { "value": "[variables('globalvariable').genericresourceprefix.datalakeanalyticmgn]" },
                    "datafactory": { "value": "[variables('globalvariable').genericresourceprefix.datafactory]" },
                    "datafactorymgn": { "value": "[variables('globalvariable').genericresourceprefix.datafactorymgn]" },
                    "eventhub": { "value": "[variables('globalvariable').genericresourceprefix.eventhub]" },
                    "eventhubmgn": { "value": "[variables('globalvariable').genericresourceprefix.eventhubmgn]" },
                    "notificationhub": { "value": "[variables('globalvariable').genericresourceprefix.notificationhub]" },
                    "notificationhubmgn": { "value": "[variables('globalvariable').genericresourceprefix.notificationhubmgn]" },
                    "notificationhubnamespace": { "value": "[variables('globalvariable').genericresourceprefix.notificationhubnamespace]" },
                    "notificationhubnamespacemgn": { "value": "[variables('globalvariable').genericresourceprefix.notificationhubnamespacemgn]" },
                    "blueprint": { "value": "[variables('globalvariable').genericresourceprefix.blueprint]" },
                    "blueprintmgn": { "value": "[variables('globalvariable').genericresourceprefix.blueprintmgn]" },

                    "azmonitorappinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorappinsig]" },
                    "azmonitorappinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorappinsigmgn]" },
                    "azmonitorvminsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorvminsig]" },
                    "azmonitorvminsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorvminsigmgn]" },
                    "azmonitornetworkinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitornetworkinsig]" },
                    "azmonitornetworkinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitornetworkinsigmgn]" },
                    "azmonitorsqlinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorsqlinsig]" },
                    "azmonitorsqlinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorsqlinsigmgn]" },
                    "azmonitorcontainerinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorcontainerinsig]" },
                    "azmonitorcontainerinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorcontainerinsigmgn]" },
                    "azmonitorcosmosdbinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorcosmosdbinsig]" },
                    "azmonitorcosmosdbinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorcosmosdbinsigmgn]" },
                    "azmonitorressourcegpinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorressourcegpinsig]" },
                    "azmonitorressourcegpinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorressourcegpinsigmgn]" },
                    "azmonitorstorageinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorstorageinsig]" },
                    "azmonitorstorageinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorstorageinsigmgn]" },
                    "azmonitorkeyvaultinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorkeyvaultinsig]" },
                    "azmonitorkeyvaultinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorkeyvaultinsigmgn]" },
                    "azmonitorredisinsig": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorredisinsig]" },
                    "azmonitorredisinsigmgn": { "value": "[variables('globalvariable').genericresourceprefix.azmonitorredisinsigmgn]" },
                    "virtualmachinescaleset": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachinescaleset]" },
                    "virtualmachinescalesetmgn": { "value": "[variables('globalvariable').genericresourceprefix.virtualmachinescalesetmgn]" },
                    "trafficmanage": { "value": "[variables('globalvariable').genericresourceprefix.trafficmanage]" },
                    "trafficmanagemgn": { "value": "[variables('globalvariable').genericresourceprefix.trafficmanagemgn]" },
                    "cdn": { "value": "[variables('globalvariable').genericresourceprefix.cdn]" },
                    "cdnmgn": { "value": "[variables('globalvariable').genericresourceprefix.cdnmgn]" },
                    "migrate": { "value": "[variables('globalvariable').genericresourceprefix.migrate]" },
                    "migratemgn": { "value": "[variables('globalvariable').genericresourceprefix.migratemgn]" },
                    "managedapp": { "value": "[variables('globalvariable').genericresourceprefix.managedapp]" },
                    "managedappmgn": { "value": "[variables('globalvariable').genericresourceprefix.managedappmgn]" },
                    "kubernettescluster": { "value": "[variables('globalvariable').genericresourceprefix.kubernettescluster]" },
                    "kubernettesclustermgn": { "value": "[variables('globalvariable').genericresourceprefix.kubernettesclustermgn]" },
                    "azureacr": { "value": "[variables('globalvariable').genericresourceprefix.azureacr]" },
                    "azureacrmgn": { "value": "[variables('globalvariable').genericresourceprefix.azureacrmgn]" },
                    "fontdoor": { "value": "[variables('globalvariable').genericresourceprefix.fontdoor]" },
                    "fontdoormgn": { "value": "[variables('globalvariable').genericresourceprefix.fontdoormgn]" },
                    "backup": { "value": "[variables('globalvariable').genericresourceprefix.backup]" },
                    "backupmgn": { "value": "[variables('globalvariable').genericresourceprefix.backupmgn]" },
                    "bastionhost": { "value": "[variables('globalvariable').genericresourceprefix.bastionhost]" },
                    "bastionhostmgn": { "value": "[variables('globalvariable').genericresourceprefix.bastionhostmgn]" }

                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('delayFor', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[variables('globalvariable').scope]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": 20,
                "mode": "Serial",
                "name": "DeploymentDelay"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        {
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('managementSubscriptionId'))), variables('moveSubscription'), variables('noSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identityMoveSubscription'), variables('noIdentitySubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-online', '/', parameters('onlineLzSubscriptionId')[copyIndex()]), variables('noOnlineLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "copy": {
                "name": "onlineLzMove",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-corp', '/', parameters('corpLzSubscriptionId')[copyIndex()]), variables('noCorpLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "copy": {
                "name": "onlineLzMove",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "properties": {}
        },
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopemanagement]",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "enableLogAnalytics": {
                        "value": "[parameters('enableLogAnalytics')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableAntiMalware'), 'Yes'), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').monitoringDeploymentName]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableAntiMalware": {
                        "value": "[parameters('enableAntiMalware')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopeidentity]",
            "name": "[variables('deploymentNames').identityDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').identity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "denyRdpForIdentity": {
                        "value": "[parameters('denyRdpForIdentity')]"
                    },
                    "denySubnetWithoutNsgForIdentity": {
                        "value": "[parameters('denySubnetWithoutNsgForIdentity')]"
                    },
                    "denyPipForIdentity": {
                        "value": "[parameters('denyPipForIdentity')]"
                    },
                    "enableVmBackupForIdentity": {
                        "value": "[parameters('enableVmBackupForIdentity')]"
                    }
                }
            }
        },
        {
            "condition": "[or(or(or(or(or(or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableSqlAudit'), 'Yes')), equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Yes')), equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Yes')), equals(parameters('denySubnetWithoutNsg'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')), equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes')), equals(parameters('enableSqlEncryption'), 'Yes'), equals(parameters('enableStorageHttps'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopelz]",
            "name": "[variables('deploymentNames').lzDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').landingZone]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "denyHttpIngressForAks": {
                        "value": "[parameters('denyHttpIngressForAks')]"
                    },
                    "denyAksPrivilegedEscalation": {
                        "value": "[parameters('denyAksPrivilegedEscalation')]"
                    },
                    "denyAksPrivileged": {
                        "value": "[parameters('denyAksPrivileged')]"
                    },
                    "enableSqlAudit": {
                        "value": "[parameters('enableSqlAudit')]"
                    },
                    "enableSqlEncryption": {
                        "value": "[parameters('enableSqlEncryption')]"
                    },
                    "enableVmBackup": {
                        "value": "[parameters('enableVmBackup')]"
                    },
                    "denyRdp": {
                        "value": "[parameters('denyRdp')]"
                    },
                    "enableAksPolicy": {
                        "value": "[parameters('enableAksPolicy')]"
                    },
                    "enableStorageHttps": {
                        "value": "[parameters('enableStorageHttps')]"
                    },
                    "denyIpForwarding": {
                        "value": "[parameters('denyIpForwarding')]"
                    },
                    "denySubnetWithoutNsg": {
                        "value": "[parameters('denySubnetWithoutNsg')]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scope]",
            "name": "[variables('deploymentNames').diagAndSecDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').monitoringDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').diagnosticsAndSecurity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "enableLogAnalytics": {
                        "value": "[parameters('enableLogAnalytics')]"
                    },
                    "enableAsc": {
                        "value": "[parameters('enableAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "enableAscForKubernetes": {
                        "value": "[parameters('enableAscForKubernetes')]"
                    },
                    "enableAscForRegistries": {
                        "value": "[parameters('enableAscForRegistries')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "onlineLzSubscriptionId": {
                        "value": "[parameters('onlineLzSubscriptionId')]"
                    },
                    "corpLzSubscriptionId": {
                        "value": "[parameters('corpLzSubscriptionId')]"
                    },
                    "identitySubscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "enableVmMonitoring": {
                        "value": "[parameters('enableVmMonitoring')]"
                    },
                    "enableVmssMonitoring": {
                        "value": "[parameters('enableVmssMonitoring')]"
                    },
                    "enableArcMonitoring": {
                        "value": "[parameters('enableArcMonitoring')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivityMoveSubscription'), variables('noConnectivitySubscription'))]",
            "dependsOn": [
                "DeploymentDelay"
            ],
            "properties": {}
        },
        {
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableVwan'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopeconnectivity]",
            "name": "[variables('deploymentNames').connectivityDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').diagAndSecDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').connectivity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('resourceTags')]"
                    },
                    "enableVwan": {
                        "value": "[parameters('enableVwan')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },

        {
            "condition": "[equals(parameters('enableCustomRBAC'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[  variables('globalvariable').scope]",
            "name": "[variables('deploymentNames').customrbacDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').customrbac]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },
                    "prefixmgn": { "value": "[variables('globalvariable').prefixmgn]" },
                    "appname": { "value": "[variables('globalvariable').appname]" },
                    "businessunit": { "value": "[variables('globalvariable').businessunit]" },
                    "scope": { "value": "[variables('globalvariable').scope]" },
                    "scopeplatform": { "value": "[variables('globalvariable').scopeplatform]" },
                    "scopemanagement": { "value": "[variables('globalvariable').scopemanagement]" },
                    "scopeconnectivity": { "value": "[variables('globalvariable').scopeconnectivity]" },
                    "scopeidentity": { "value": "[variables('globalvariable').scopeidentity]" },
                    "scopelz": { "value": "[variables('globalvariable').scopelz]" },
                    "scopelzonline": { "value": "[variables('globalvariable').scopelzonline]" },
                    "scopelzcorp": { "value": "[variables('globalvariable').scopelzcorp]" },
                    "mgngroup": { "value": "[variables('globalvariable').genericresourceprefix.mgngroup]" },
                    "mgngroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.mgngroupmgn]" },
                    "resourcgroup": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroup]" },
                    "resourcgroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroupmgn]" },
                    "policydefp": { "value": "[variables('globalvariable').genericresourceprefix.policydefp]" },
                    "policydefpmgn": { "value": "[variables('globalvariable').genericresourceprefix.policydefpmgn]" },
                    "policyassign": { "value": "[variables('globalvariable').genericresourceprefix.policyassign]" },
                    "policyassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.policyassignmgn]" },
                    "rbacassign": { "value": "[variables('globalvariable').genericresourceprefix.rbacassign]" },
                    "rbacassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacassignmgn]" },
                    "rbacdef": { "value": "[variables('globalvariable').genericresourceprefix.rbacdef]" },
                    "rbacdefmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacdefmgn]" }
                }
            }
        },

        {

            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[  variables('globalvariable').scope]",
            "name": "[variables('deploymentNames').customPoliciesAssigDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').custompoliciesassign]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },
                    "listOfAllowedLocations": { "value": "[parameters('listOfAllowedLocations')]" },
                    "prefixmgn": { "value": "[variables('globalvariable').prefixmgn]" },
                    "appname": { "value": "[variables('globalvariable').appname]" },
                    "businessunit": { "value": "[variables('globalvariable').businessunit]" },
                    "scope": { "value": "[variables('globalvariable').scope]" },
                    "scopeplatform": { "value": "[variables('globalvariable').scopeplatform]" },
                    "scopemanagement": { "value": "[variables('globalvariable').scopemanagement]" },
                    "scopeconnectivity": { "value": "[variables('globalvariable').scopeconnectivity]" },
                    "scopeidentity": { "value": "[variables('globalvariable').scopeidentity]" },
                    "scopelz": { "value": "[variables('globalvariable').scopelz]" },
                    "scopelzonline": { "value": "[variables('globalvariable').scopelzonline]" },
                    "scopelzcorp": { "value": "[variables('globalvariable').scopelzcorp]" },
                    "mgngroup": { "value": "[variables('globalvariable').genericresourceprefix.mgngroup]" },
                    "mgngroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.mgngroupmgn]" },
                    "resourcgroup": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroup]" },
                    "resourcgroupmgn": { "value": "[variables('globalvariable').genericresourceprefix.resourcgroupmgn]" },
                    "policydefp": { "value": "[variables('globalvariable').genericresourceprefix.policydefp]" },
                    "policydefpmgn": { "value": "[variables('globalvariable').genericresourceprefix.policydefpmgn]" },
                    "policyassign": { "value": "[variables('globalvariable').genericresourceprefix.policyassign]" },
                    "policyassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.policyassignmgn]" },
                    "rbacassign": { "value": "[variables('globalvariable').genericresourceprefix.rbacassign]" },
                    "rbacassignmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacassignmgn]" },
                    "rbacdef": { "value": "[variables('globalvariable').genericresourceprefix.rbacdef]" },
                    "rbacdefmgn": { "value": "[variables('globalvariable').genericresourceprefix.rbacdefmgn]" },
                    "apply-pbmm": { "value": "[parameters('apply-pbmm')]" },
                    "apply-kubclust-sec-base-linux-wk": { "value": "[parameters('apply-kubclust-sec-base-linux-wk')]" },
                    "apply-kubclust-sec-strict-linux-wk": { "value": "[parameters('apply-kubclust-sec-strict-linux-wk')]" },
                    "apply-windows-vm-security-base": { "value": "[parameters('apply-windows-vm-security-base')]" },
                    "apply-data-protection-suite": { "value": "[parameters('apply-data-protection-suite')]" },
                    "apply-flowlog-nsg-iaas": { "value": "[parameters('apply-flowlog-nsg-iaas')]" },
                    "apply-config-azuremonitor-security-agent-vm-iaas": { "value": "[parameters('apply-config-azuremonitor-security-agent-vm-iaas')]" },
                    "apply-vm-insecure-pwd-security-iaas": { "value": "[parameters('apply-vm-insecure-pwd-security-iaas')]" },
                    "apply-deny-public-endpoint-paas": { "value": "[parameters('apply-deny-public-endpoint-paas')]" },
                    "apply-tls-ssl-enforcement-encrypt-paas": { "value": "[parameters('apply-tls-ssl-enforcement-encrypt-paas')]" },
                    "apply-audit-resource-without-encryption": { "value": "[parameters('apply-audit-resource-without-encryption')]" },
                    "tagauditpolicy": { "value": "[parameters('tagauditpolicy')]" },
                    "resourceTags": { "value": "[parameters('tagsByResource')]" }



                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
        }
    }
}