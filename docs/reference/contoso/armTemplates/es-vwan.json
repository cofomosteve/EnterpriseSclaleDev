{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleCompanyPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "NamingConvention": {
            "type": "string",

            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },

        "resourceTagsOQLF": {
            "type": "object",
            "defaultValue": {
                "CentreCout": "DTI",
                "Env": "Prod",
                "RAD": "Mission Critique",
                "CIDC": "111",
                "NomApplication": "ES",
                "Direction": "DTI"
            }
        },
        "resourceTagCAF": {
            "type": "object",
            "defaultValue": {
                "CostCenter": "ES",
                "Env": "Prod",
                "DR": "Mission Critique",
                "Direction": "SHARED"
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "devopsLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first devops landing zones."
            }
        },


        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableCustomRBAC": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },

        "retentionInDays": {
            "type": "string",
            "defaultValue": ""
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAksPolicy": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForStorage": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSql": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKeyVault": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForArm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForDns": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKubernetes": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForRegistries": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableArcMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce Arc monitoring."
            }
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAgentHealth": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableActivityLog": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableAntiMalware": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableServiceMap": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAssessment": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyRdp": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]"
        },
        "enableConnectivity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVwan": {
            "type": "string",
            "defaultValue": "No"
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "tagsByResource": {
            "type": "object",
            "defaultValue": {}
        },
        "apply-pbmm": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-kubclust-sec-base-linux-wk": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-kubclust-sec-strict-linux-wk": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "apply-windows-vm-security-base": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-data-protection-suite": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-flowlog-nsg-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-config-azuremonitor-security-agent-vm-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-vm-insecure-pwd-security-iaas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-deny-public-endpoint-paas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "apply-tls-ssl-enforcement-encrypt-paas": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "apply-audit-resource-without-encryption": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "cktagbyresource": {
            "type": "bool",
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": false
        },
        "tagauditpolicy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },

        "allowedVMSizesku": {
            "type": "array",
            "metadata": {
                "displayName": "Which VM Wize?",
                "description": "allowedVMSizesku"
            },
            "defaultValue": []
        },
        "allowedlocation": {
            "type": "array",
            "metadata": {
                "displayName": "Which Region Allowed?",
                "description": "allowedlocation"
            },
            "defaultValue": []
        },
        "listOfResourceTypesWithDiagnosticLogsEnabled": {
            "type": "Array",

            "defaultValue": [

            ]
        },
        "listOfMembersToExcludeFromWindowsVMAdministratorsGroup": {
            "type": "String",
            "defaultValue": "AdminNo"

        },
        "listOfMembersToIncludeInWindowsVMAdministratorsGroup": {
            "type": "String",
            "defaultValue": "AdminYes"

        }
    },
    "variables": {

        "resourceTagsOQLF": "[parameters('resourceTagsOQLF')]",
        "tagsByResource": "[parameters('tagsByResource')]",
        "resourceTagCAF": "[parameters('resourceTagCAF')]",
        "resourceTags": "[if(equals(parameters('NamingConvention'), 'OQLF'),variables('tagsByResource'),variables('tagsByResource'))]",

        "prefixmgn": "mg-",
        "businessunit": "IT-",
        "env": "prod-",
        "appname": "ES-",
        "topLevelManagementGroupPrefix": "[concat(variables('prefixmgn'),parameters('enterpriseScaleCompanyPrefix'))]",
        "globalvariable": {
            "scope": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'))]",
            "scopeplatform": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-platform')]",
            "scopemanagement": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-management')]",
            "scopeconnectivity": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-connectivity')]",
            "scopeidentity": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-identity')]",
            "scopelz": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-landingzones')]",
            "scopelzonline": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-online')]",
            "scopelzcorp": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-corp')]",
            "scopelzdevops": "[concat('/providers/Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-devops')]",

            "scopebase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'))]",
            "scopeplatformbase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-platform')]",
            "scopemanagementbase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-management')]",
            "scopeconnectivitybase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-connectivity')]",
            "scopeidentitybase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-identity')]",
            "scopelzbase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-landingzones')]",
            "scopelzonlinebase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-online')]",
            "scopelzcorpbase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-corp')]",
            "scopelzdevopsbase": "[concat('Microsoft.Management/managementGroups/', variables('topLevelManagementGroupPrefix'), '-devops')]",

            "genericresourceprefix": {

                "mgngroupmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat(variables('prefixmgn'),   parameters('enterpriseScaleCompanyPrefix')),concat(variables('prefixmgn'),   parameters('enterpriseScaleCompanyPrefix')))]",
                "resourcgroupmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('rg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('rg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "policydefpmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('pdef-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('pdef-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "policyassignmgn": "", //"[if(equals(parameters('NamingConvention'), 'OQLF'),concat('pa-',   parameters('enterpriseScaleCompanyPrefix'),'-'),'CAF')]",


                "rbacassignmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('RBAC-CUSTOM-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('RBAC-CUSTOM-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "rbacdefmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('rbac-ass-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('rbac-ass-',   parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "loganalyticwkmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('la-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('la-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "keyvaultmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('kv-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('kv-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "storagemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('st-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('st-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "storagediagnosticmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('st-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('st-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "conatainerinstancemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('aci-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('aci-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "containerregistrymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('acr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('acr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "budgetconsumptionmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('bdcon-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('bdcon-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "diasgsettingmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('diag-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('diag-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "deploymentmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('dp-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('dp-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virtualnetworkmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vnet-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('vnet-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "subnetmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('snet-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('snet-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",
                "gwsubnetmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('snet-gw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('snet-gw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",
                "fwsubnetmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('snet-fw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('snet-fw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "virtualnetworkpeeringmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vnet-peer-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vnet-peer-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virtualnetworkgatewaymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vnet-gw-v-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('vnet-gw-v-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "localnetworkgatewaylocalmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vnet-gw-l-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('vnet-gw-l-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "networksitetositemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('cm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('cm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "vpnconnectionmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('cn-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('cn-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "nsgmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('nsg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('nsg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "asgmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('asg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('asg-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",

                "pubipmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('pip-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location),concat('pip-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env'),'-',deployment().location))]",


                "virtualmachinemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virtualmachinestorageaccountmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('stvm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('stvm-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "nicmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('nic-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('nic-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",


                "dnsprivatemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('dnspriv-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('dnspriv-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "dnspubblicmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('dns-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('dns-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "loadbalancermgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('lb-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('lb-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "applicationgatewaymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('app-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('app-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",


                "privatelinkmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('priv-lk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('priv-lk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "privateendpointmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('priv-end-p-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('priv-end-p-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azurefirewallmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('fw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('fw-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azurefirewallpoliciesmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('fw-pol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('fw-pol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azurefirewallrulegroupmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('fw-rul-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('fw-rul-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "securityprincingmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('sec-pric-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('sec-pric-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "workspacedatasourcemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('wk-dt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('wk-dt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "automationaccountmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('ac-',  parameters('enterpriseScaleCompanyPrefix'),'-'),concat('ac-',  parameters('enterpriseScaleCompanyPrefix'),'-'))]",

                "workspacemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('wk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('wk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "linkedservicemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('lk-svc-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('lk-svc-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "ddosplanmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('ddos-pl-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('ddos-pl-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "networkwatchermgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('nt-watch-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('nt-watch-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",


                "networkwatcherflowlogmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('nt-watch-fl-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('nt-watch-fl-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "databaseauditsettingmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('db-aud-set-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('db-aud-set-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "databasetransparencryptmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('db-trans-enc-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('db-trans-enc-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "dataasesecalertpolmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('db-sec-al-pol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('db-sec-al-pol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "databasevulassessmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('db-vulass-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('db-vulass-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "wanmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('wan-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('wan-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "hubmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('hub-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('hub-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virrtualhubmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vhub-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vhub-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virrtualhubconnectionmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vhub-con-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vhub-con-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virtualwanmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vwan-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vwan-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "vpngatewaymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vpn-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vpn-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "expressroutegatewaymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('er-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('er-gt-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "virtualmachineextensionmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vm-ext-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vm-ext-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",



                "opmanagesolutionmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('op-mgn-sol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('op-mgn-sol-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",




                "azmonitorappinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('app-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('app-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorvminsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('vm-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('vm-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitornetworkinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('nwt-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('nwt-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorsqlinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('sql-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('sql-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorcontainerinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('ctn-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('ctn-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorcosmosdbinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('cosdb-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('cosdb-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorressourcegpinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('rg-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('rg-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorstorageinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('stor-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('stor-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorkeyvaultinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('kv-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('kv-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azmonitorredisinsigmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('redis-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('redis-ins-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "azsolsecmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solsec',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solsec',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolagenthealthmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solaghealthass',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solaghealthass',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolchangetrackingmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solitrackchns',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solitrackchns',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolupdatemanagemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solupdate',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solupdate',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolactivitymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solactivity',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solactivity',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolsqlassessmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solsqlassess',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solsqlassess',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolantimalwaremgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solantimalware',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solantimalware',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolsrvmapmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solsvcmap',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solsvcmap',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolsecinsightmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solsecins',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solsecins',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",
                "azsolvminsightmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('solvmins',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')),concat('solvmins',  parameters('enterpriseScaleCompanyPrefix'),'',variables('businessunit'),variables('env')))]",


                // "azsolsecmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'Security','Security')]",
                // "azsolagenthealthmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'AgentHealthAssessment','AgentHealthAssessment')]",
                // "azsolchangetrackingmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'ChangeTracking','ChangeTracking')]",
                // "azsolupdatemanagemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'Updates','Updates')]",
                // "azsolactivitymgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'AzureActivity','AzureActivity')]",
                // "azsolsqlassessmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'SQLAssessment','SQLAssessment')]",
                // "azsolantimalwaremgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'AntiMalware','AntiMalware')]",
                // "azsolsrvmapmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'ServiceMap','ServiceMap')]",
                // "azsolsecinsightmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'SecurityInsights','SecurityInsights')]",
                // "azsolvminsightmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),'VMInsights','VMInsights')]",



                "trafficmanagemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('tf-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('tf-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "cdnmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('cdn-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('cdn-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "migratemgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('azmigr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('azmigr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",



                "azureacrmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('azacr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('azacr-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "fontdoormgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('fd-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('fd-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "backupmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('bk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('bk-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]",

                "bastionhostmgn": "[if(equals(parameters('NamingConvention'), 'OQLF'),concat('bh-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')),concat('bh-',  parameters('enterpriseScaleCompanyPrefix'),'-',variables('businessunit'),variables('env')))]"






            }


        },
        "delimiters": [ "," ],
        //"tagsByResourceout": "[ if(contains(variables('resourceTags'), 'Microsoft.*'), variables('resourceTags')['Microsoft.*'], json('{}')) ]",
        "tagsByResourceout": "[ if(contains(variables('resourceTags'), 'Microsoft.*'), variables('resourceTags')['Microsoft.*'], variables('resourceTags')) ]",
        "settingArray": "[if(empty(variables('tagsByResourceout')),createArray(),split(replace(replace(replace(string(variables('tagsByResourceout')), '{', ''), '}', ''), '\"', ''), variables('delimiters')))]",


        "propNameArray": {
            "copy": [
                {
                    "name": "copyPropertyNames",
                    "count": "[length(variables('settingArray'))]",
                    "input": "[substring(variables('settingArray')[copyIndex('copyPropertyNames')], 0, indexOf(variables('settingArray')[copyIndex('copyPropertyNames')], ':'))]"
                }
            ]
        },

        "loganalyticnameManagementsub": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('globalvariable').genericresourceprefix.resourcgroupmgn, 'mgmt', '/providers/Microsoft.OperationalInsights/workspaces/', variables('globalvariable').genericresourceprefix.loganalyticwkmgn, parameters('managementSubscriptionId')))]",
        "loganalyticnameManagement": "[toLower(concat(variables('globalvariable').genericresourceprefix.loganalyticwkmgn, parameters('managementSubscriptionId')))]",
        "workspaceName": "[concat(variables('globalvariable').genericresourceprefix.loganalyticwkmgn, parameters('managementSubscriptionId'))]",
        "automationAccountName": "[concat(variables('globalvariable').genericresourceprefix.automationaccountmgn, parameters('managementSubscriptionId'))]",
        "ManagementRessourceGroup": "[concat(variables('globalvariable').genericresourceprefix.resourcgroupmgn, 'mgmt')]",
        "IdentityRessourceGroup": "[concat(variables('globalvariable').genericresourceprefix.resourcgroupmgn, 'identity')]",
        "ConnectityRessourceGroup": "[concat(variables('globalvariable').genericresourceprefix.resourcgroupmgn, 'connectivity')]",
        "LandingZoneRessourceGroup": "[concat(variables('globalvariable').genericresourceprefix.resourcgroupmgn, 'landingzone')]",
        "azPolicyEnvMapping": {
            "https://management.azure.com/": "auxiliary/policies.json",
            "https://management.chinacloudapi.cn": "auxiliary/mkPolicies.json",
            "https://management.azgov.com": "auxiliary/"
        },

        "azEnvPolicy": "[variables('azPolicyEnvMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'auxiliary/mgmtGroups.json')]",
            "policyDefinitions": "[concat(uri(deployment().properties.templateLink.uri, variables('azEnvPolicy')))]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalytics.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalyticsSolutions.json')]",
            "connectivity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/vwan-connectivity.json')]",
            "diagnosticsAndSecurity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/diagnosticsAndSecurity.json')]",
            "landingZone": "[uri(deployment().properties.templateLink.uri, 'auxiliary/lz.json')]",
            "identity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/identity.json')]",
            "customrbac": "[uri(deployment().properties.templateLink.uri, 'auxiliary/custom-rbac.json')]",
            "custompoliciesassign": "[uri(deployment().properties.templateLink.uri, 'auxiliary/policiesassignment.json')]"
        },
        "moveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-management', '/', parameters('managementSubscriptionId'))]",

        "noSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-management', '/', 'na')]",
        "noOnlineLzSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-online', '/', 'nalz')]",
        "noCorpLzSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-corp', '/', 'nalz')]",
        "noDevOpsLzSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-devops', '/', 'nalz')]",
        "connectivityMoveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-connectivity', '/', parameters('connectivitySubscriptionId'))]",
        "noConnectivitySubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-connectivity', '/', 'naconn')]",
        "identityMoveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-identity', '/', parameters('identitySubscriptionId'))]",

        // "OnlineLzMoveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-online', '/', parameters('onlineLzSubscriptionId'))]",
        // "CorpLzMoveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-corp', '/', parameters('corpLzSubscriptionId'))]",
        // "DevOpsLzMoveSubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-devops', '/', parameters('devopsLzSubscriptionId'))]",

        "noIdentitySubscription": "[concat(variables('topLevelManagementGroupPrefix'), '-identity', '/', 'naid')]",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat('EntScale-Mgs', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "policyDeploymentName": "[take(concat('EntScale-Policy', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringDeploymentName": "[take(concat('EntScale-Monitoring', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat('EntScale-Solutions', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "diagAndSecDeploymentName": "[take(concat('EntScale-DiagSec', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "connectivityDeploymentName": "[take(concat('EntScale-conn', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "lzDeploymentName": "[take(concat('EntScale-LZ', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "identityDeploymentName": "[take(concat('EntScale-ID', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "customrbacDeploymentName": "[take(concat('EntScale-RBAC', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "customPoliciesAssigDeploymentName": "[take(concat('EntScale-PoliciesAssig', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('topLevelManagementGroupPrefix')]" //"[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('globalvariable').scopebase]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    // "topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },

                    "resourceTags": { "value": "[variables('tagsByResourceout')]" },
                    "globalvariable": { "value": "[variables('globalvariable')]" }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('delayFor', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[variables('globalvariable').scopebase]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": 20,
                "mode": "Serial",
                "name": "DeploymentDelay"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        {
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('managementSubscriptionId'))), variables('moveSubscription'), variables('noSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identityMoveSubscription'), variables('noIdentitySubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },

        /*  {
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), variables('OnlineLzMoveSubscription'), variables('noOnlineLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), variables('CorpLzMoveSubscription'), variables('noCorpLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('devopsLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('devopsLzSubscriptionId'))), variables('DevOpsLzMoveSubscription'), variables('noDevOpsLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "properties": {}
        },*/


        {
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), concat(variables('topLevelManagementGroupPrefix'), '-online', '/', parameters('onlineLzSubscriptionId')[copyIndex()]), variables('noOnlineLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "copy": {
                "name": "onlineLzMove",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), concat(variables('topLevelManagementGroupPrefix'), '-corp', '/', parameters('corpLzSubscriptionId')[copyIndex()]), variables('noCorpLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "copy": {
                "name": "coprLzMove",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "properties": {}
        },
        {
            "condition": "[not(empty(parameters('devopsLzSubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('devopsLzSubscriptionId'))), concat(variables('topLevelManagementGroupPrefix'), '-devops', '/', parameters('devopsLzSubscriptionId')[copyIndex()]), variables('noDevOpsLzSubscription'))]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]"
            ],
            "copy": {
                "name": "devopsLzMove",
                "count": "[length(parameters('devopsLzSubscriptionId'))]"
            },
            "properties": {}
        }
        
        ,

        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopemanagementbase]",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "enableLogAnalytics": {
                        "value": "[parameters('enableLogAnalytics')]"
                    },
                    "loganalyticnameManagementsub": {
                        "value": "[variables('loganalyticnameManagementsub')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspaceName')]"
                    },
                    "automationAccountName": {
                        "value": "[variables('automationAccountName')]"
                    },
                    "ManagementRessourceGroup": {
                        "value": "[variables('ManagementRessourceGroup')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableAntiMalware'), 'Yes'), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').monitoringDeploymentName]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspaceName')]"
                    },
                    "automationAccountName": {
                        "value": "[variables('automationAccountName')]"
                    },
                    "ManagementRessourceGroup": {
                        "value": "[variables('ManagementRessourceGroup')]"
                    },

                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableAntiMalware": {
                        "value": "[parameters('enableAntiMalware')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "loganalyticnameManagementsub": {
                        "value": "[variables('loganalyticnameManagementsub')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            //"scope": "[variables('globalvariable').scopeidentitybase]",
            "name": "[variables('deploymentNames').identityDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').identity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "denyRdpForIdentity": {
                        "value": "[parameters('denyRdpForIdentity')]"
                    },
                    "denySubnetWithoutNsgForIdentity": {
                        "value": "[parameters('denySubnetWithoutNsgForIdentity')]"
                    },
                    "denyPipForIdentity": {
                        "value": "[parameters('denyPipForIdentity')]"
                    },
                    "enableVmBackupForIdentity": {
                        "value": "[parameters('enableVmBackupForIdentity')]"
                    },
                    "IdentityRessourceGroup": {
                        "value": "[variables('IdentityRessourceGroup')]"
                    },
                    "identitySubscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            }
        },
        {
            "condition": "[or(or(or(or(or(or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableSqlAudit'), 'Yes')), equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Yes')), equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Yes')), equals(parameters('denySubnetWithoutNsg'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')), equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes')), equals(parameters('enableSqlEncryption'), 'Yes'), equals(parameters('enableStorageHttps'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            //"scope": "[variables('globalvariable').scopelzbase]",
            "name": "[variables('deploymentNames').lzDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').landingZone]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "denyHttpIngressForAks": {
                        "value": "[parameters('denyHttpIngressForAks')]"
                    },
                    "denyAksPrivilegedEscalation": {
                        "value": "[parameters('denyAksPrivilegedEscalation')]"
                    },
                    "denyAksPrivileged": {
                        "value": "[parameters('denyAksPrivileged')]"
                    },
                    "enableSqlAudit": {
                        "value": "[parameters('enableSqlAudit')]"
                    },
                    "enableSqlEncryption": {
                        "value": "[parameters('enableSqlEncryption')]"
                    },
                    "enableVmBackup": {
                        "value": "[parameters('enableVmBackup')]"
                    },
                    "denyRdp": {
                        "value": "[parameters('denyRdp')]"
                    },
                    "enableAksPolicy": {
                        "value": "[parameters('enableAksPolicy')]"
                    },
                    "enableStorageHttps": {
                        "value": "[parameters('enableStorageHttps')]"
                    },
                    "denyIpForwarding": {
                        "value": "[parameters('denyIpForwarding')]"
                    },
                    "denySubnetWithoutNsg": {
                        "value": "[parameters('denySubnetWithoutNsg')]"
                    },
                    "LandingZoneRessourceGroup": {
                        "value": "[variables('LandingZoneRessourceGroup')]"
                    },
                    "onlineLzSubscriptionId": {
                        "value": "[parameters('onlineLzSubscriptionId')]"
                    },
                    "corpLzSubscriptionId": {
                        "value": "[parameters('corpLzSubscriptionId')]"
                    },
                    "devopsLzSubscriptionId": {
                        "value": "[parameters('devopsLzSubscriptionId')]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopebase]",
            "name": "[variables('deploymentNames').diagAndSecDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').monitoringDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').diagnosticsAndSecurity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "enableLogAnalytics": {
                        "value": "[parameters('enableLogAnalytics')]"
                    },
                    "loganalyticnameManagementsub": {
                        "value": "[variables('loganalyticnameManagementsub')]"
                    },
                    "enableAsc": {
                        "value": "[parameters('enableAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "enableAscForKubernetes": {
                        "value": "[parameters('enableAscForKubernetes')]"
                    },
                    "enableAscForRegistries": {
                        "value": "[parameters('enableAscForRegistries')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "onlineLzSubscriptionId": {
                        "value": "[parameters('onlineLzSubscriptionId')]"
                    },
                    "corpLzSubscriptionId": {
                        "value": "[parameters('corpLzSubscriptionId')]"
                    },
                    "devopsLzSubscriptionId": {
                        "value": "[parameters('devopsLzSubscriptionId')]"
                    },
                    "identitySubscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "enableVmMonitoring": {
                        "value": "[parameters('enableVmMonitoring')]"
                    },
                    "enableVmssMonitoring": {
                        "value": "[parameters('enableVmssMonitoring')]"
                    },
                    "enableArcMonitoring": {
                        "value": "[parameters('enableArcMonitoring')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Management/managementGroups/subscriptions",
            "apiVersion": "2020-05-01",
            "name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivityMoveSubscription'), variables('noConnectivitySubscription'))]",
            "dependsOn": [
                "DeploymentDelay"
            ],
            "properties": {}
        },
        {
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableConnectivity'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('globalvariable').scopeconnectivitybase]",
            "name": "[variables('deploymentNames').connectivityDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').diagAndSecDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').connectivity]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceTags": {
                        "value": "[variables('tagsByResourceout')]"
                    },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "enableVwan": {
                        "value": "[parameters('enableConnectivity')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "ConnectityRessourceGroup": {
                        "value": "[variables('ConnectityRessourceGroup')]"
                    },

                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('enableCustomRBAC'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[  variables('globalvariable').scopebase]",
            "name": "[variables('deploymentNames').customrbacDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').customrbac]"
                },
                "parameters": {
                    //"topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },
                    "globalvariable": { "value": "[variables('globalvariable')]" }
                }
            }
        },

        {

            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[  variables('globalvariable').scopebase]",
            "name": "[variables('deploymentNames').customPoliciesAssigDeploymentName]",
            "dependsOn": [
                "[variables('deploymentNames').mgmtGroupDeploymentName]",                
                "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
                "[variables('deploymentNames').connectivityDeploymentName]",
                "DeploymentDelay"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').custompoliciesassign]"
                },
                "parameters": {

                    "topLevelManagementGroupPrefix": { "value": "[parameters('enterpriseScaleCompanyPrefix')]" },

                    "resourceTags": { "value": "[variables('tagsByResourceout')]" },
                    "resourceTagsKey": { "value": "[variables('propNameArray').copyPropertyNames]" },
                    "globalvariable": { "value": "[variables('globalvariable')]" },
                    "apply-pbmm": { "value": "[parameters('apply-pbmm')]" },
                    "apply-kubclust-sec-base-linux-wk": { "value": "[parameters('apply-kubclust-sec-base-linux-wk')]" },
                    "apply-kubclust-sec-strict-linux-wk": { "value": "[parameters('apply-kubclust-sec-strict-linux-wk')]" },
                    "apply-windows-vm-security-base": { "value": "[parameters('apply-windows-vm-security-base')]" },
                    "apply-data-protection-suite": { "value": "[parameters('apply-data-protection-suite')]" },
                    "apply-flowlog-nsg-iaas": { "value": "[parameters('apply-flowlog-nsg-iaas')]" },
                    "apply-config-azuremonitor-security-agent-vm-iaas": { "value": "[parameters('apply-config-azuremonitor-security-agent-vm-iaas')]" },
                    "apply-vm-insecure-pwd-security-iaas": { "value": "[parameters('apply-vm-insecure-pwd-security-iaas')]" },
                    "apply-deny-public-endpoint-paas": { "value": "[parameters('apply-deny-public-endpoint-paas')]" },
                    "apply-tls-ssl-enforcement-encrypt-paas": { "value": "[parameters('apply-tls-ssl-enforcement-encrypt-paas')]" },
                    "apply-audit-resource-without-encryption": { "value": "[parameters('apply-audit-resource-without-encryption')]" },
                    "listOfAllowedLocations": { "value": "[parameters('allowedlocation')]" },
                    "tagauditpolicy": { "value": "[parameters('tagauditpolicy')]" },
                    "cktagbyresource": { "value": "[parameters('cktagbyresource')]" },
                    "allowedVMSizesku": { "value": "[parameters('allowedVMSizesku')]" },
                    "listOfResourceTypesWithDiagnosticLogsEnabled": { "value": "[parameters('listOfResourceTypesWithDiagnosticLogsEnabled')]" },
                    "listOfMembersToExcludeFromWindowsVMAdministratorsGroup": { "value": "[parameters('listOfMembersToExcludeFromWindowsVMAdministratorsGroup')]" },
                    "listOfMembersToIncludeInWindowsVMAdministratorsGroup": { "value": "[parameters('listOfMembersToIncludeInWindowsVMAdministratorsGroup')]" },
                    "enableLogAnalytics": {
                        "value": "[parameters('enableLogAnalytics')]"
                    },
                    "loganalyticnameManagementsub": {
                        "value": "[variables('loganalyticnameManagementsub')]"
                    },
                    "loganalyticnameManagement": {
                        "value": "[variables('loganalyticnameManagement')]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "workspaceName": {
                        "value": "[variables('workspaceName')]"
                    },
                    "automationAccountName": {
                        "value": "[variables('automationAccountName')]"
                    },
                    "ManagementRessourceGroup": {
                        "value": "[variables('ManagementRessourceGroup')]"
                    }

                }
            }
        }

    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
        },
        "tagsByResourceArray": {
            "type": "array",
            "value": "[variables('propNameArray').copyPropertyNames]"
        },
        "resourceTags": {
            "type": "object",
            "value": "[variables('resourceTags')]"
        }
        ,
        "tagsByResourceout": {
            "type": "object",
            "value": "[variables('tagsByResourceout')]"
        }
,
        "tagsByResource": {
            "type": "object",
            "value": "[variables('tagsByResource')]"
        }
    }
}